# Cursor Rules: Mondabot Dashboard Architecture Protection & Best Practices

## üö´ NEVER DO THESE (Critical Architecture Protection)

### Static Export is FORBIDDEN
- NEVER use `output: 'export'` in next.config.ts
- NEVER suggest converting to static export for deployment issues
- NEVER remove API routes to enable static export
- Static export breaks: Socket.IO, real-time features, server-side functionality

### Standalone Mode is FORBIDDEN
- NEVER use `output: 'standalone'` in next.config.ts
- NEVER suggest standalone mode for deployment optimization
- Standalone mode conflicts with Express server integration
- Breaks Socket.IO and Airtable integration
- Creates self-contained Next.js server that bypasses Express

### Port Architecture is SACRED
- Port 3000 = Frontend with backend proxy (ALWAYS test here)
- Port 3001 = Backend API only (NEVER test frontend changes here)
- NEVER suggest merging backend into Next.js API routes
- NEVER suggest single-port architecture changes

### Development Workflow Protection
- ALWAYS preserve the dual-server development setup
- NEVER suggest removing the Express backend
- NEVER suggest moving Socket.IO to Next.js API routes
- The proxy setup in next.config.ts is REQUIRED and must be preserved

## ‚úÖ ALWAYS DO THESE (Required Patterns)

### React Hooks Rules (CRITICAL)
- ALWAYS call hooks at the top level of components
- NEVER wrap hooks in try-catch blocks
- NEVER call hooks conditionally
- Handle errors in useEffect or event handlers, not around hooks

```typescript
// ‚ùå WRONG - Conditional hook call
function Component() {
  try {
    const { user } = useAuth(); // This violates hooks rules
  } catch (error) {
    setAuthError(error.message);
  }
}

// ‚úÖ CORRECT - Always call hooks at top level
function Component() {
  const { user } = useAuth(); // Always called at top level
  
  useEffect(() => {
    if (user) {
      // Handle auth logic conditionally
    }
  }, [user]);
}
```

### Authentication Redirect Configuration
- ALWAYS use consistent redirect URLs across all Clerk components
- Use `forceRedirectUrl` and `fallbackRedirectUrl` for SignIn/SignUp components
- NEVER use multiple conflicting redirect props
- ALWAYS redirect to `/dashboard` after successful authentication

```typescript
// ‚ùå WRONG - Multiple conflicting redirect props
<SignIn 
  afterSignInUrl="/"
  afterSignUpUrl="/"
  redirectUrl="/"
  path="/login"
  routing="path"
/>

// ‚úÖ CORRECT - Clean redirect configuration
<SignIn 
  forceRedirectUrl="/dashboard"
  fallbackRedirectUrl="/dashboard"
/>
```

### Deployment Issues = Configuration Fix, NOT Architecture Change
- Railway/deployment errors are ALWAYS configuration issues
- Fix deployment configuration, NEVER change the application architecture
- Preserve the Next.js + Express separation at all costs
- Use proper production build strategies (traditional Next.js, not standalone or export)

### Maintain Dual Service Architecture
- Frontend: Next.js with App Router
- Backend: Express with Airtable integration and Socket.IO
- Proxy: Next.js rewrites from frontend to backend
- This architecture is intentional and professional

### Development Environment Rules
- Both servers must run simultaneously during development
- Use concurrently for unified startup scripts
- Always include health checks for development debugging
- Port 3000 is the ONLY testing environment for frontend changes

## üõ†Ô∏è Problem Solving Hierarchy

### 1. Build Failures
```
IF build fails with React Hooks error:
  1. Check for hooks inside try-catch blocks
  2. Move all hooks to top level of components
  3. Handle errors in useEffect, not around hooks
  4. Remove unused variables and fix ESLint errors
  NEVER: Change architecture or remove authentication
```

### 2. Authentication Issues
```
IF users stuck on login page after authentication:
  1. Check for conflicting redirect props in Clerk components
  2. Use only forceRedirectUrl and fallbackRedirectUrl
  3. Ensure consistent /dashboard redirect URLs
  4. Update ClerkProvider configuration
  NEVER: Remove authentication or change auth flow
```

### 3. Deployment Issues
```
IF deployment fails:
  1. Test build locally first: cd mondabot-dashboard && npm run build
  2. Fix ESLint/TypeScript errors locally
  3. Check environment variables are set correctly
  4. Verify Next.js configuration (no standalone mode)
  5. Fix Railway/hosting configuration
  NEVER: Change application architecture
```

### 4. Development Issues
```
IF localhost issues:
  1. Ensure both servers are running (npm run dev)
  2. Test on localhost:3000 (NOT 3001)
  3. Check proxy configuration in next.config.ts
  4. Verify CORS settings in backend
  5. Check health endpoints
  NEVER: Merge servers or change ports
```

### 5. PowerShell Command Issues
```
IF PowerShell command separator errors:
  1. Use semicolon (;) instead of && in PowerShell
  2. Use separate commands if needed
  3. Use cmd /c for && commands if necessary
  NEVER: Remove dual-server setup due to command syntax
```

## üìã Required File Structure

### Next.js Configuration (next.config.ts)
```typescript
const nextConfig: NextConfig = {
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:3001/api/:path*',
      },
    ];
  },
  // NEVER add: output: 'standalone' or output: 'export'
  
  env: {
    NEXT_PUBLIC_ENABLE_AUTHENTICATION: process.env.NEXT_PUBLIC_ENABLE_AUTHENTICATION,
  },
  
  webpack: (config) => {
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      net: false,
      tls: false,
    };
    return config;
  },
};
```

### Package.json Scripts (Required)
```json
{
  "scripts": {
    "dev": "concurrently \"npm run backend\" \"npm run frontend\"",
    "backend": "cd server && npm run dev",
    "frontend": "next dev --dir mondabot-dashboard",
    "build": "cd mondabot-dashboard && npm run build",
    "start": "cd mondabot-dashboard && npm start",
    "railway:start": "node server/server.js"
  }
}
```

### Server Structure (Required)
```
server/
‚îú‚îÄ‚îÄ server.js (or index.js)
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ .env
```

## üöÄ Deployment Strategies (Approved Only)

### Railway Monorepo (Recommended)
- Single service running both Next.js and Express
- Use concurrently to start both servers
- Dockerfile builds both applications
- Start command: `npm run railway:start`

### Required Environment Variables
```env
# Production
NODE_ENV=production
RAILWAY_ENVIRONMENT=production
NEXT_PUBLIC_ENABLE_AUTHENTICATION=true

# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_...
CLERK_SECRET_KEY=sk_live_...

# Airtable Integration
AIRTABLE_API_KEY=pat...
AIRTABLE_BASE_ID=app...
```

### FORBIDDEN Deployment Approaches
- ‚ùå Static export with Express serving files
- ‚ùå Standalone mode with Express integration
- ‚ùå Moving backend logic to Next.js API routes
- ‚ùå Removing real-time Socket.IO functionality
- ‚ùå Single-port architecture

## üîß When User Reports Issues

### "Build fails with React Hooks error"
**Response:** "This is a React Hooks rules violation. We need to move all hooks to the top level of components and remove try-catch blocks around hooks."

### "Users stuck on login page after authentication"
**Response:** "This is a Clerk redirect configuration issue. We need to use consistent redirect URLs and remove conflicting redirect props."

### "Changes don't show on localhost:3001"
**Response:** "Port 3001 is backend-only. Test frontend changes on localhost:3000 where the proxy works."

### "Deployment fails on Railway/Vercel/etc"
**Response:** "This is a deployment configuration issue. We'll fix the hosting setup and build configuration, not the application architecture."

### "API routes not working"
**Response:** "Check the proxy configuration and ensure both servers are running. Never remove the Express backend."

### "Want everything on one port"
**Response:** "The current architecture is professional and scalable. We'll improve the development workflow, not change the architecture."

### "PowerShell command errors with &&"
**Response:** "Use semicolon (;) instead of && in PowerShell, or separate commands. We won't change the architecture due to command syntax."

## üìñ Educational Reminders

### Architecture Benefits (Always Explain)
- **Separation of Concerns**: Frontend and backend can evolve independently
- **Scalability**: Can scale services independently in production
- **Professional Pattern**: Industry-standard microservices-ready architecture
- **Development Flexibility**: Multiple frontends can use the same backend
- **Real-time Capabilities**: Dedicated Express server for Socket.IO

### Common Misconceptions (Always Correct)
- "Single port is simpler" ‚Üí Professional apps use multiple services
- "Static export is better" ‚Üí Static export removes server-side capabilities
- "Standalone mode optimizes deployment" ‚Üí Standalone mode conflicts with Express
- "Next.js API routes are sufficient" ‚Üí Express provides better real-time and scaling options
- "Hooks in try-catch are fine" ‚Üí This violates React Hooks rules and breaks builds

## üéØ Success Criteria for Any Changes

Before implementing ANY changes, verify:
- ‚úÖ React Hooks are called at top level (no conditional calls)
- ‚úÖ Socket.IO real-time functionality preserved
- ‚úÖ Airtable integration remains in Express backend
- ‚úÖ Development workflow (npm run dev) still works
- ‚úÖ Proxy configuration still routes API calls correctly
- ‚úÖ Both servers can run independently
- ‚úÖ Production deployment strategy maintains separation
- ‚úÖ Authentication redirects work correctly
- ‚úÖ Build completes without ESLint/TypeScript errors

## üö® Emergency Prevention

If user insists on problematic changes:
1. **Explain why the current architecture is superior**
2. **Show how the change would break existing functionality**
3. **Reference specific errors we've encountered and solved**
4. **Offer alternative solutions that preserve architecture**
5. **Only implement if user explicitly accepts trade-offs**

## üîê Authentication Implementation Rules

### When Adding Authentication
- NEVER remove the Express backend for authentication
- JWT tokens should be handled by Express server
- Session management stays on backend
- Protected routes use middleware on Express
- Frontend authentication state managed via React Context
- Login/logout endpoints must be Express API routes

### Authentication Architecture
```
Frontend (Next.js) ‚Üí API Proxy ‚Üí Express Backend ‚Üí Authentication Logic
```

### Required Authentication Endpoints (Express)
- POST /api/login
- POST /api/logout  
- GET /api/verify-token
- POST /api/register (if needed)

### Clerk Configuration Requirements
- Use consistent redirect URLs across all components
- Always redirect to /dashboard after authentication
- Use forceRedirectUrl and fallbackRedirectUrl only
- Remove conflicting redirect props

## üì¶ Dependency Management

### Backend Dependencies (server/package.json)
- express (required)
- socket.io (required for real-time)
- airtable (required for data)
- cors (required for frontend communication)
- dotenv (required for environment variables)

### Frontend Dependencies (package.json)
- next (required)
- react (required)
- socket.io-client (required for real-time)
- concurrently (required for development)
- @clerk/nextjs (required for authentication)

### NEVER remove core dependencies to "simplify" the stack

## üîç Debugging Checklist

### Before Making Changes
1. **Test build locally**: `cd mondabot-dashboard && npm run build`
2. **Check ESLint**: `npm run lint`
3. **Verify both servers start**: `npm run dev`
4. **Test on correct port**: `localhost:3000` (not 3001)

### Common Error Patterns to Watch For
- React Hooks called conditionally (build failure)
- Multiple Clerk redirect props (authentication issues)
- Missing environment variables (runtime errors)
- Standalone mode enabled (deployment conflicts)
- Testing on wrong port (development confusion)

### Health Check Commands
```bash
# Backend health
curl http://localhost:3001/health

# Frontend health (through proxy)
curl http://localhost:3000/api/health

# Build test
cd mondabot-dashboard && npm run build
```

## üìö Documentation References

When user needs help, always reference:
- README.md (comprehensive setup guide)
- DEPLOYMENT_GUIDE.md (Railway deployment specifics)
- TROUBLESHOOTING.md (specific error solutions)

## üéØ Quality Assurance

### Before Committing Changes
1. **Build succeeds locally**
2. **No ESLint errors**
3. **Authentication flow works**
4. **Both servers start correctly**
5. **Health endpoints respond**
6. **All tests pass**

### Before Deployment
1. **Local build test passes**
2. **Environment variables configured**
3. **No React Hooks violations**
4. **Clerk redirects configured correctly**
5. **Architecture preserved**

Remember: This architecture is intentionally sophisticated and follows industry best practices. Protect it at all costs! The dual-server setup, proper authentication flow, and build configuration are the result of solving real-world problems and should not be changed lightly. 